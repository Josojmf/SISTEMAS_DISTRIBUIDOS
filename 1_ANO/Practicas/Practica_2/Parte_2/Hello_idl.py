# Python stubs generated by omniidl from .\Hello.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "HelloApp"
#
__name__ = "HelloApp"
_0_HelloApp = omniORB.openModule("HelloApp", r".\Hello.idl")
_0_HelloApp__POA = omniORB.openModule("HelloApp__POA", r".\Hello.idl")


# typedef ... arr
class arr:
    _NP_RepositoryId = "IDL:HelloApp/arr:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_HelloApp.arr = arr
_0_HelloApp._d_arr  = (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_long, 4)
_0_HelloApp._ad_arr = (omniORB.tcInternal.tv_alias, arr._NP_RepositoryId, "arr", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_long, 4))
_0_HelloApp._tc_arr = omniORB.tcInternal.createTypeCode(_0_HelloApp._ad_arr)
omniORB.registerType(arr._NP_RepositoryId, _0_HelloApp._ad_arr, _0_HelloApp._tc_arr)
del arr

# interface Hello
_0_HelloApp._d_Hello = (omniORB.tcInternal.tv_objref, "IDL:HelloApp/Hello:1.0", "Hello")
omniORB.typeMapping["IDL:HelloApp/Hello:1.0"] = _0_HelloApp._d_Hello
_0_HelloApp.Hello = omniORB.newEmptyClass()
class Hello :
    _NP_RepositoryId = _0_HelloApp._d_Hello[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_HelloApp.Hello = Hello
_0_HelloApp._tc_Hello = omniORB.tcInternal.createTypeCode(_0_HelloApp._d_Hello)
omniORB.registerType(Hello._NP_RepositoryId, _0_HelloApp._d_Hello, _0_HelloApp._tc_Hello)

# Hello operations and attributes
Hello._d_sayHello = ((), ((omniORB.tcInternal.tv_string,0), ), None)
Hello._d_suma = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), None)
Hello._d_restar = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), None)
Hello._d_multiplicar = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), None)
Hello._d_dividir = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), None)
Hello._d_factorial = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
Hello._d_potencia = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), None)
Hello._d_logaritmo = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
Hello._d_raiz = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
Hello._d_derivar = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:HelloApp/arr:1.0"]), ((omniORB.tcInternal.tv_string,0), ), None)
Hello._d_shutdown = ((), None, None)

# Hello object reference
class _objref_Hello (CORBA.Object):
    _NP_RepositoryId = Hello._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def sayHello(self, *args):
        return self._obj.invoke("sayHello", _0_HelloApp.Hello._d_sayHello, args)

    def suma(self, *args):
        return self._obj.invoke("suma", _0_HelloApp.Hello._d_suma, args)

    def restar(self, *args):
        return self._obj.invoke("restar", _0_HelloApp.Hello._d_restar, args)

    def multiplicar(self, *args):
        return self._obj.invoke("multiplicar", _0_HelloApp.Hello._d_multiplicar, args)

    def dividir(self, *args):
        return self._obj.invoke("dividir", _0_HelloApp.Hello._d_dividir, args)

    def factorial(self, *args):
        return self._obj.invoke("factorial", _0_HelloApp.Hello._d_factorial, args)

    def potencia(self, *args):
        return self._obj.invoke("potencia", _0_HelloApp.Hello._d_potencia, args)

    def logaritmo(self, *args):
        return self._obj.invoke("logaritmo", _0_HelloApp.Hello._d_logaritmo, args)

    def raiz(self, *args):
        return self._obj.invoke("raiz", _0_HelloApp.Hello._d_raiz, args)

    def derivar(self, *args):
        return self._obj.invoke("derivar", _0_HelloApp.Hello._d_derivar, args)

    def shutdown(self, *args):
        return self._obj.invoke("shutdown", _0_HelloApp.Hello._d_shutdown, args)

omniORB.registerObjref(Hello._NP_RepositoryId, _objref_Hello)
_0_HelloApp._objref_Hello = _objref_Hello
del Hello, _objref_Hello

# Hello skeleton
__name__ = "HelloApp__POA"
class Hello (PortableServer.Servant):
    _NP_RepositoryId = _0_HelloApp.Hello._NP_RepositoryId


    _omni_op_d = {"sayHello": _0_HelloApp.Hello._d_sayHello, "suma": _0_HelloApp.Hello._d_suma, "restar": _0_HelloApp.Hello._d_restar, "multiplicar": _0_HelloApp.Hello._d_multiplicar, "dividir": _0_HelloApp.Hello._d_dividir, "factorial": _0_HelloApp.Hello._d_factorial, "potencia": _0_HelloApp.Hello._d_potencia, "logaritmo": _0_HelloApp.Hello._d_logaritmo, "raiz": _0_HelloApp.Hello._d_raiz, "derivar": _0_HelloApp.Hello._d_derivar, "shutdown": _0_HelloApp.Hello._d_shutdown}

Hello._omni_skeleton = Hello
_0_HelloApp__POA.Hello = Hello
omniORB.registerSkeleton(Hello._NP_RepositoryId, Hello)
del Hello
__name__ = "HelloApp"

#
# End of module "HelloApp"
#
__name__ = "Hello_idl"

_exported_modules = ( "HelloApp", )

# The end.
